{
  "hash": "1cbf23aea9898bdb4ff946d251b49e41",
  "result": {
    "markdown": "---\ntitle: \"The Python journey--One Semester with Python\"\nauthor: \"Robert Mitchell\"\ndate: \"December 5, 2014\"\ncategories: [Python, Thoughts]\n---\n\n\n<br>\n\n\n\n\n\nThis was _quite_ a journey for me.  I started the same way everyone else\nhas; with my very _first_ \"Hello World\" program written in Python 3:\n\n<br>\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Hello World! program.\ndef main():\n    #get the user's name\n    name = input('What is your name? ')\n    print('Hello World! I am', name)\n\n# Call the main function\nmain()\n```\n:::\n\n\nThis was the first assignment for my Programming in Python course.  I\nwas not content to have it only print \"Hello World\"---no, I need to\npersonalize it in some small way.  The following was really interface\n(if I'm speaking pythonically); to a wider interest in programming\n_qua_ programming:\n\n<br>\n\n\n::: {.cell}\n\n```{.python .cell-code}\nname = input('What is your name? ')\n```\n:::\n\n\n<br>\n\nNevertheless, I was not content with this.  I allowed myself to be sucked into a forceful vortex that had me thinking I'd be using Jupytr notebooks, matplotlib, etc., to show off how much I know about Python from Twitter.  Notwithstanding, the above is what was submitted because I didn't know how to do any of the fancy stuff I read about.  I didn't know how to use Pandas.  I didn't know how to use Blaze.  I didn't even know how to use _'conda update conda'_ in my terminal (oh; it's a package manager---not just an easy way to install Python 3.4 on my computer at work without Admin privlages!).\n\n<br>\n\nThe reality is that I still have a lot to learn---I'm still in the shallow end. Nothing prepared me for the absolute _angst_ associated with trying to implement a (beginner's attempt at) the Object Oriented Programming (OOP) paradigm as a final extra-credit assignment!  I didn't even _know_ I had been writing, although very functional; or, very function reliant, procedural code.  Somewhere between nesting lists inside of dictionaries, iterating over them, and implementing _'try, except'_ statements, I thought I was really _going places_ with my code.  OOP razed that sandcastle quite briskly.  Like a kind of soverign and violent natural phenomena.\n\n<br>\n\nFrom my first program to my 10th program, this is how far I have come.  This is my attempt at OOP, classes, _'init'_ methods, ~~inheritance~~ composition, and more.  It's likely pretty flawed and could be made less redundant, but I didn't copy StackOverflow and tried to figure it out on my own; so, I'm damn proud of it!  There were some programs specs that I needed to show an understanding of; quickly, the program specs:\n\n<br>\n\n* Each question will have four possible answers\n* Each player will take turns with the questions\n* There will be a total of 10 questions, each player getting a chance to answer five of them.  If the player selects the correct answer, they earn a point.  Tell the player whether they got it right or wrong.\n* Must create a 'Question' class to hold data with the following attributes:\n    - A trivia question\n    - Possible answer 1\n    - Possible answer 2\n    - Possible answer 3\n    - Possible answer 4\n    - The number of the correct answer, e.g., 1, 2, 3, or 4\n* Question class must have an _'__init__'_ method, accessors, mutators, and  a _'__str__'_ method.\n* Use value-returning functions; one named _createQuestionsAnswers()_ that \n  creates the list to display questions and keeps tracks of user input to let players know if they won, lost, or tied.\n\n<br>\n\nHere are my solutions:\n\n<br>\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# -*- coding: utf-8 -*-\n\"\"\"     A10--Trivia Game!\n        --> two player trivia game\n        --> OOP approach to building the game with classes and objects\n\"\"\"\nimport csv\nimport random\n\n# the Question class acts as a placeholder for the parts of the question\n# needed to construct questions and check answers\nclass Question:\n    # __init__ uses the Data class method getData through composition\n    def __init__(self, question, a1, a2, a3, a4, answer, ansNum):\n        self.getData = Data('csv')\n        self.question = question\n        self.a1 = a1\n        self.a2 = a2\n        self.a3 = a3\n        self.a4 = a4\n        self.answer = answer\n        self.ansNum = ansNum\n\n    # the method performs better as a class method since it instantiates the\n    # Question class with sample questions for the game\n    @classmethod\n    def getQuestion(cls, triviaDict):\n        # using random to get 10 random numbers between a specific range for\n        # trivia questions\n        randomGenerator = random.sample(range(1, 817), 1)\n\n        # for an individual random number in the sample range\n        # --> iterate and use number as index for the trivia questions\n        for i in randomGenerator:\n            question = triviaDict[i][0]\n            a1 = triviaDict[i][1]\n            a2= triviaDict[i][2]\n            a3 = triviaDict[i][3]\n            a4 = triviaDict[i][4]\n            answer = triviaDict[i][5]\n            ansNum = triviaDict[i][6]\n\n        # this creates an instance to return (from question class)\n        aQuestion = Question(question, a1, a2, a3, a4, answer, ansNum)\n        return aQuestion\n\n    # this is a part of using composition rather than inheritance to get the\n    # attributes from the getData method\n    def __getattr__(self, attr):\n        return getattr(self.getData, attr)\n\n    # this method sets up the question (also checks answer)\n    @classmethod\n    def setupAsk(cls, q):\n        print('\\n', q.question, '\\n\\t1: ', q.a1, ' \\\n                 \\n\\t2: ', q.a2, '\\n\\t3: ', q.a3, ' \\\n                 \\n\\t4: ', q.a4, '\\n')\n\n        # make sure the user's input works\n        while True:\n            try:\n                choice = int(input(\"\\nWhat's your answer? \\n--> \"))\n            except ValueError:\n                print('\\nSorry, the answer only accepts numbers; please \\\n                       enter a number 1-4')\n                choice = int(input(\"\\nWhat's your answer? \\n--> \"))\n            finally:\n                if choice in range(1, 5):\n                    break\n\n        # if the question is correct, return true; if not, return false\n        if choice == q.ansNum:\n            print('\\nCorrect! \\n', q.answer)\n            return True\n        elif choice != q.ansNum:\n            print('\\nIncorrect!  \\n', q.answer)\n            return False\n\n# the Data class handles openning the file and preparing it to be used by\n# the Question and Game class\nclass Data:\n    def __init__(self, filetype):\n        self.filetype = filetype\n\n    # opens the CSV to read and prepare it to be used in computaiton later\n    @classmethod\n    def getData(cls):\n        # make sure there isn't an IO error\n        try:\n            # open the csv file + use an index accumulator for dictionary\n            with open('trivia.csv') as csvFile:\n                readCSV = csv.reader(csvFile, delimiter=',')\n                index = 0\n\n                # questions, answer choices, and answers dictionary\n                rowDict = {}\n                questionData = {}\n                # reading the trivia questions\n                for row in readCSV:\n                    rowDict[index] = row\n                    question = rowDict[index][0]\n                    a1 = rowDict[index][1]\n                    a2 = rowDict[index][2]\n                    a3 = rowDict[index][3]\n                    a4 = rowDict[index][4]\n                    answer = rowDict[index][5]\n\n                    # figure out which answer is correct and assign a variable\n                    if answer == a1:\n                        ansNum = 1\n                    elif answer == a2:\n                        ansNum = 2\n                    elif answer == a3:\n                        ansNum = 3\n                    elif answer == a4:\n                        ansNum = 4\n                    else:\n                        print(\"Error!  No correct answer\")\n\n                    # place questions into new dictionary in the right order\n                    questionData[index] = [question, a1, a2, a3, a4, \\\n                                            answer, ansNum]\n                    index += 1\n\n                return questionData\n\n        except IOError:\n            print(\"The file could not be found.\")\n\n# the Game class is where the bulk of the game's structure is found\nclass Game:\n    def __init__(self, playerID, gamePoints):\n        self.playerID = playerID\n        self.gamePoints = gamePoints\n\n    # method to create instances for questions and find out if a quesiton\n    # was answered correctly or not\n    def round(self, qClass, data):\n        gamePoints = 0 # reset to 0 for new round\n\n        # instances\n        q1 = qClass.getQuestion(data)\n        q2 = qClass.getQuestion(data)\n        q3 = qClass.getQuestion(data)\n        q4 = qClass.getQuestion(data)\n        q5 = qClass.getQuestion(data)\n\n        # return value is true or false; this computes points\n        if qClass.setupAsk(q1) == True:\n            gamePoints += 1\n        if qClass.setupAsk(q2) == True:\n            gamePoints += 1\n        if qClass.setupAsk(q3) == True:\n            gamePoints += 1\n        if qClass.setupAsk(q4) == True:\n            gamePoints += 1\n        if qClass.setupAsk(q5) == True:\n            gamePoints += 1\n\n        # let the user know what happenned this round\n        print('you won {} points this game!'.format(gamePoints))\n\n        return gamePoints\n\ndef main():\n    # local variables\n    flag = False\n    gameNum = 1\n\n    # instance of Data class\n    data = Data('csv')\n    questionsData = data.getData()\n\n    # instance of Question class with filler data\n    questions = Question('question', 'a1', 'a2', 'a3', 'a4', \\\n                         'answer', 'ansNum')\n\n    # create both players\n    playerOne = Game(str(input('PLAYER ONE//\\nEnter your name: ')), 0,)\n    playerTwo = Game(str(input('PLAYER TWO//\\nEnter your name: ')), 0,)\n\n    # while loop to keep the game going if the user chooses\n    while flag != True:\n        # let the user know which round they're playing\n        print('\\nROUND ', gameNum, '//\\nPlayer One')\n\n        # first player instance; asks five questions\n        p1round = playerOne.round(questions, questionsData)\n\n        print(\"\"\"\n        +++++++++++++++++++++++++++++++++++++++++++++++++\n        +                   SWITCH PLAYERS!             +\n        +++++++++++++++++++++++++++++++++++++++++++++++++\n        \"\"\")\n\n        # let the user know to switch players\n        print('\\nROUND ', gameNum, '//\\nPlayer Two')\n\n        # second player instance; asks the five quesitons\n        p2round = playerTwo.round(questions, questionsData)\n\n        # let the user know which round they are on with accumulator\n        gameNum += 1\n\n        # figure out who won and use user's inputed name and their points\n        # in print statement\n        if p1round < p2round:\n            print('Thank you for playing!  {} is the winner with {} total \\\n                  game points!'.format(playerTwo.playerID, p2round))\n        elif p2round < p1round:\n            print('Thank you for playing!  {} is the winner with {} total \\\n                  game points!'.format(playerOne.playerID, p1round))\n        elif p2round == p1round:\n            print('There was a tie!  Both {} and {} both earned {} total \\\n                   game points; but you are both still \\\n                   winners!'.format(playerOne.playerID, playerTwo.playerID, \\\n                   p1round))\n\n        # find out if user wants to continue + validate user response\n        while True:\n            try:\n                choice = str(input(\"\\nKeep playing? \\n--> \")).upper()\n            except ValueError:\n                print(\"Sorry, enter either a 'Y' for 'Yes', or 'N' for 'No'.\")\n            finally:\n                if choice == 'N':\n                    flag = True\n                    break\n                if choice == 'Y':\n                    break\n                else:\n                    print(\"please enter either a 'Y' for 'Yes', or 'N' \\\n                           for 'No'.\")\n\n    # say bye to players and quit the program\n    print('\\nThank you for playing!  See you next time!\\n')\n\nmain()\n```\n:::\n\n\n<br>\n\nI couldn't help but think about Plato when I was trying to understand how Objects work in Python.  There's something really similar about how a _'class'_ has a kind of _ontos_---that it isn't just a blueprint---it exists, and it did exist before the _'init'_ method gave it attributes; that prescriptive human speculation we come up with when describing the form of something abstract like 'the Beautiful' (although it's been a while since my Phil 100A course at UCLA---I hope I'm not misrepresenting the _Phaedo_).\n\n<br>\n\nThe course is over but I have a few titles I purchased from Packt to dig a little deeper.  Suggestions are always welcome; the journey's _telos_ is to learn; and learn I intend to do!\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}